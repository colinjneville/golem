// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::run();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let (t2_0, t2_1, t2_2) = result0;
    match t2_0 {
        Ok(e) => {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
            let vec3 = (e.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *ptr1.add(8).cast::<usize>() = len3;
            *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
        }
        Err(e) => {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            let vec4 = (e.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *ptr1.add(8).cast::<usize>() = len4;
            *ptr1.add(4).cast::<*mut u8>() = ptr4.cast_mut();
        }
    };
    match t2_1 {
        Ok(e) => {
            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
            let vec5 = (e.into_bytes()).into_boxed_slice();
            let ptr5 = vec5.as_ptr().cast::<u8>();
            let len5 = vec5.len();
            ::core::mem::forget(vec5);
            *ptr1.add(20).cast::<usize>() = len5;
            *ptr1.add(16).cast::<*mut u8>() = ptr5.cast_mut();
        }
        Err(e) => {
            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
            let vec6 = (e.into_bytes()).into_boxed_slice();
            let ptr6 = vec6.as_ptr().cast::<u8>();
            let len6 = vec6.len();
            ::core::mem::forget(vec6);
            *ptr1.add(20).cast::<usize>() = len6;
            *ptr1.add(16).cast::<*mut u8>() = ptr6.cast_mut();
        }
    };
    let vec7 = (t2_2.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr1.add(28).cast::<usize>() = len7;
    *ptr1.add(24).cast::<*mut u8>() = ptr7.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0.add(4).cast::<*mut u8>();
            let l2 = *arg0.add(8).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
        _ => {
            let l3 = *arg0.add(4).cast::<*mut u8>();
            let l4 = *arg0.add(8).cast::<usize>();
            _rt::cabi_dealloc(l3, l4, 1);
        }
    }
    let l5 = i32::from(*arg0.add(12).cast::<u8>());
    match l5 {
        0 => {
            let l6 = *arg0.add(16).cast::<*mut u8>();
            let l7 = *arg0.add(20).cast::<usize>();
            _rt::cabi_dealloc(l6, l7, 1);
        }
        _ => {
            let l8 = *arg0.add(16).cast::<*mut u8>();
            let l9 = *arg0.add(20).cast::<usize>();
            _rt::cabi_dealloc(l8, l9, 1);
        }
    }
    let l10 = *arg0.add(24).cast::<*mut u8>();
    let l11 = *arg0.add(28).cast::<usize>();
    _rt::cabi_dealloc(l10, l11, 1);
}
pub trait Guest {
    fn run() -> (
        Result<_rt::String, _rt::String>,
        Result<_rt::String, _rt::String>,
        _rt::String,
    );
}
#[doc(hidden)]

macro_rules! __export_world_file_initial_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "run"]
    unsafe extern "C" fn export_run() -> *mut u8 {
      $($path_to_types)*::_export_run_cabi::<$ty>()
    }
    #[export_name = "cabi_post_run"]
    unsafe extern "C" fn _post_return_run(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_run::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_file_initial_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 32]);
mod _rt {

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_file_initial_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_file_initial_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_file_initial_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:file-initial:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 187] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x079\x01A\x02\x01A\x04\x01\
j\x01s\x01s\x01o\x03\0\0s\x01@\0\0\x01\x04\0\x03run\x01\x02\x04\x01\x15golem:it/\
file-initial\x04\0\x0b\x12\x01\0\x0cfile-initial\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
